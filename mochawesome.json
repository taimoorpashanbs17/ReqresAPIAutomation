{
  "stats": {
    "suites": 7,
    "tests": 21,
    "passes": 16,
    "pending": 0,
    "failures": 5,
    "testsRegistered": 21,
    "passPercent": 76.19047619047619,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2025-01-16T21:52:30.373Z",
    "end": "2025-01-16T21:52:51.556Z",
    "duration": 21183
  },
  "results": [
    {
      "uuid": "a83144a9-47b1-429e-baf4-b2514033609f",
      "title": "",
      "fullFile": "cypress/e2e/api-tests/createUser.spec.js",
      "file": "cypress/e2e/api-tests/createUser.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6dd6159a-4e9d-4b4a-a537-9b69d012aa6b",
          "title": "Users API - POST Requests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create User Successfully",
              "fullTitle": "Users API - POST Requests Create User Successfully",
              "timedOut": null,
              "duration": 687,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  name: `Testing_user_${formattedDateTime}`,\n  job: 'Developer'\n};\nuserApiPage.createUser(newUser).then(response => {\n  expect(response.status).to.eq(201);\n  expect(response.body).to.have.property('name', `Testing_user_${formattedDateTime}`);\n  expect(response.body).to.have.property('job', 'Developer');\n  expect(response.body).to.have.property('id');\n});",
              "err": {},
              "uuid": "3e92690d-befb-4c80-b90b-0148cf83d165",
              "parentUUID": "6dd6159a-4e9d-4b4a-a537-9b69d012aa6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Return an error when mandatory fields are missing",
              "fullTitle": "Users API - POST Requests Return an error when mandatory fields are missing",
              "timedOut": null,
              "duration": 731,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const incompleteUser = {\n  name: '',\n  job: 'Tester'\n};\nuserApiPage.createUser(incompleteUser).then(response => {\n  expect(response.status).to.eq(400);\n});",
              "err": {
                "message": "AssertionError: expected 201 to equal 400",
                "estack": "AssertionError: expected 201 to equal 400\n    at Context.eval (webpack://requesapiautomation/./cypress/e2e/api-tests/createUser.spec.js:37:39)",
                "diff": "- 201\n+ 400\n"
              },
              "uuid": "eeee1f29-0bbe-4fe1-a8a9-53c53428c610",
              "parentUUID": "6dd6159a-4e9d-4b4a-a537-9b69d012aa6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate the schema for creating a user",
              "fullTitle": "Users API - POST Requests should validate the schema for creating a user",
              "timedOut": null,
              "duration": 280,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  name: `John Doe_${formattedDateTime}`,\n  job: 'Developer'\n};\nuserApiPage.createUser(newUser).then(response => {\n  const validate = ajv.compile(_createUserSchema.default);\n  const valid = validate(response.body);\n  expect(valid, `Schema validation failed: ${ajv.errorsText(validate.errors)}`).to.be.true;\n});",
              "err": {},
              "uuid": "0e7a0b55-9636-4c40-9ae1-55f51a3dd18e",
              "parentUUID": "6dd6159a-4e9d-4b4a-a537-9b69d012aa6b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3e92690d-befb-4c80-b90b-0148cf83d165",
            "0e7a0b55-9636-4c40-9ae1-55f51a3dd18e"
          ],
          "failures": [
            "eeee1f29-0bbe-4fe1-a8a9-53c53428c610"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1698,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "8ea391b3-5fb8-4216-9a86-cf0e14243060",
      "title": "",
      "fullFile": "cypress/e2e/api-tests/deleteUser.spec.js",
      "file": "cypress/e2e/api-tests/deleteUser.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "67d65eb3-187c-49ee-95c5-90d02ea1e031",
          "title": "Users API - DELETE Requests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete a user successfully",
              "fullTitle": "Users API - DELETE Requests should delete a user successfully",
              "timedOut": null,
              "duration": 275,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userApiPage.deleteUser(2).then(response => {\n  expect(response.status).to.eq(204);\n});",
              "err": {},
              "uuid": "e6ea6d67-c603-4c83-9bc2-db79e18fa052",
              "parentUUID": "67d65eb3-187c-49ee-95c5-90d02ea1e031",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for deleting a non-existent user",
              "fullTitle": "Users API - DELETE Requests should return 404 for deleting a non-existent user",
              "timedOut": null,
              "duration": 599,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "userApiPage.deleteUser(9999).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {
                "message": "AssertionError: expected 204 to equal 404",
                "estack": "AssertionError: expected 204 to equal 404\n    at Context.eval (webpack://requesapiautomation/./cypress/e2e/api-tests/deleteUser.spec.js:18:33)",
                "diff": "- 204\n+ 404\n"
              },
              "uuid": "5c1de319-7ff5-43d0-b428-1c065590426c",
              "parentUUID": "67d65eb3-187c-49ee-95c5-90d02ea1e031",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate the schema for deleting a user",
              "fullTitle": "Users API - DELETE Requests should validate the schema for deleting a user",
              "timedOut": null,
              "duration": 699,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "userApiPage.deleteUser(2).then(response => {\n  const validate = ajv.compile(_deleteUserSchema.default);\n  const valid = validate(response.body);\n  expect(valid, `Schema validation failed: ${ajv.errorsText(validate.errors)}`).to.be.true;\n});",
              "err": {
                "message": "AssertionError: Schema validation failed: data must be object: expected false to be true",
                "estack": "AssertionError: Schema validation failed: data must be object: expected false to be true\n    at Context.eval (webpack://requesapiautomation/./cypress/e2e/api-tests/deleteUser.spec.js:26:90)",
                "diff": null
              },
              "uuid": "d928550a-ba31-4ee0-9ee1-d4369157c85d",
              "parentUUID": "67d65eb3-187c-49ee-95c5-90d02ea1e031",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e6ea6d67-c603-4c83-9bc2-db79e18fa052"
          ],
          "failures": [
            "5c1de319-7ff5-43d0-b428-1c065590426c",
            "d928550a-ba31-4ee0-9ee1-d4369157c85d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1573,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4189f42c-454c-4417-8b0e-9e34c1b3effb",
      "title": "",
      "fullFile": "cypress/e2e/api-tests/getUserInfo.spec.js",
      "file": "cypress/e2e/api-tests/getUserInfo.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9a0efd7e-5f8f-49c5-adb9-b0d8d76184fe",
          "title": "User API - Get User Info Flow",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should validate that the response body matches the expected JSON Schema",
              "fullTitle": "User API - Get User Info Flow should validate that the response body matches the expected JSON Schema",
              "timedOut": null,
              "duration": 228,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userApiPage.getUserById(userId).then(response => {\n  const validate = ajv.compile(_userSchema.default);\n  const valid = validate(response.body);\n  expect(valid, `Response body does not match the expected schema: ${ajv.errorsText(validate.errors)}`).to.be.true;\n});",
              "err": {},
              "uuid": "c32e95b9-4165-4d6f-b5ba-3fe582447188",
              "parentUUID": "9a0efd7e-5f8f-49c5-adb9-b0d8d76184fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate specific data properties in the response",
              "fullTitle": "User API - Get User Info Flow should validate specific data properties in the response",
              "timedOut": null,
              "duration": 190,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userApiPage.getUserById(userId).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.data).to.have.property('id', userId);\n  expect(response.body.data).to.have.property('email').that.is.a('string');\n  expect(response.body.data).to.have.property('first_name').that.is.a('string');\n  expect(response.body.data).to.have.property('last_name').that.is.a('string');\n  expect(response.body.data).to.have.property('avatar').that.is.a('string');\n  expect(response.body.data.email).to.eq('janet.weaver@reqres.in');\n  expect(response.body.data.first_name).to.eq('Janet');\n});",
              "err": {},
              "uuid": "8d219e57-6899-44ea-9b1e-523ec99b0e82",
              "parentUUID": "9a0efd7e-5f8f-49c5-adb9-b0d8d76184fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a 404 for a non-existent user",
              "fullTitle": "User API - Get User Info Flow should return a 404 for a non-existent user",
              "timedOut": null,
              "duration": 253,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userApiPage.getUserById(9999).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "adc653af-91aa-4384-a526-7bddb45c18a2",
              "parentUUID": "9a0efd7e-5f8f-49c5-adb9-b0d8d76184fe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c32e95b9-4165-4d6f-b5ba-3fe582447188",
            "8d219e57-6899-44ea-9b1e-523ec99b0e82",
            "adc653af-91aa-4384-a526-7bddb45c18a2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 671,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "81fa9c89-7e4c-4795-91f1-62c6ae4e44ff",
      "title": "",
      "fullFile": "cypress/e2e/api-tests/getUsers.spec.js",
      "file": "cypress/e2e/api-tests/getUsers.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "71785f25-8392-43cd-a61a-69047fd9bb49",
          "title": "Users API - GET Requests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Fetch user details for a valid user ID and verify Information",
              "fullTitle": "Users API - GET Requests Fetch user details for a valid user ID and verify Information",
              "timedOut": null,
              "duration": 243,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userApiPage.getUserById(2).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.data).to.have.property('id', 2);\n  expect(response.body.data).to.have.property('email');\n});",
              "err": {},
              "uuid": "043a8b27-0db1-4c3e-be09-bbd09696595e",
              "parentUUID": "71785f25-8392-43cd-a61a-69047fd9bb49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Enter invalid user ID and make sure that status code is 404",
              "fullTitle": "Users API - GET Requests Enter invalid user ID and make sure that status code is 404",
              "timedOut": null,
              "duration": 191,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userApiPage.getUserById(9999).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "faf543db-0536-42a9-9087-01eb2699f80c",
              "parentUUID": "71785f25-8392-43cd-a61a-69047fd9bb49",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "043a8b27-0db1-4c3e-be09-bbd09696595e",
            "faf543db-0536-42a9-9087-01eb2699f80c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 434,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d3bc227d-0fb1-4010-866d-d3bf80689ea7",
      "title": "",
      "fullFile": "cypress/e2e/api-tests/registerLoginLogout.spec.js",
      "file": "cypress/e2e/api-tests/registerLoginLogout.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c37e7125-de79-4f6b-abf4-4b8cee8ae998",
          "title": "User API - Register, Login, Logout Flow",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should register a new user successfully",
              "fullTitle": "User API - Register, Login, Logout Flow should register a new user successfully",
              "timedOut": null,
              "duration": 268,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "loginRegisterApiPage.registerUser(registerUserData).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('id');\n  expect(response.body).to.have.property('token');\n  userId = response.body.id;\n});",
              "err": {},
              "uuid": "c047a820-b6b2-43c0-90e3-c2f56f97d195",
              "parentUUID": "c37e7125-de79-4f6b-abf4-4b8cee8ae998",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login with the registered user",
              "fullTitle": "User API - Register, Login, Logout Flow should login with the registered user",
              "timedOut": null,
              "duration": 242,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "loginRegisterApiPage.loginUser(loginUserData).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('token');\n});",
              "err": {},
              "uuid": "c42167db-ca64-4905-9900-767f2ff50bf3",
              "parentUUID": "c37e7125-de79-4f6b-abf4-4b8cee8ae998",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should logout successfully",
              "fullTitle": "User API - Register, Login, Logout Flow should logout successfully",
              "timedOut": null,
              "duration": 239,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userApiPage.logoutUser().then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "be334d3e-7918-4e3f-a946-d16d1b87d311",
              "parentUUID": "c37e7125-de79-4f6b-abf4-4b8cee8ae998",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c047a820-b6b2-43c0-90e3-c2f56f97d195",
            "c42167db-ca64-4905-9900-767f2ff50bf3",
            "be334d3e-7918-4e3f-a946-d16d1b87d311"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 749,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "5c1d23ad-e9e1-40fa-8d1f-e25c520584ec",
      "title": "",
      "fullFile": "cypress/e2e/api-tests/updateUser.spec.js",
      "file": "cypress/e2e/api-tests/updateUser.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "65d78fb9-965a-42bf-aff3-546b99e5f01a",
          "title": "Users API - PUT Requests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update user details successfully",
              "fullTitle": "Users API - PUT Requests should update user details successfully",
              "timedOut": null,
              "duration": 266,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUser = {\n  name: 'Jane Doe',\n  job: 'Manager'\n};\nuserApiPage.updateUser(2, updatedUser).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('name', 'Jane Doe');\n  expect(response.body).to.have.property('job', 'Manager');\n});",
              "err": {},
              "uuid": "521000a0-180d-4fe2-b193-281134a2bb90",
              "parentUUID": "65d78fb9-965a-42bf-aff3-546b99e5f01a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate the schema for updating a user",
              "fullTitle": "Users API - PUT Requests should validate the schema for updating a user",
              "timedOut": null,
              "duration": 273,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUser = {\n  name: 'Jane Doe',\n  job: 'Senior Developer'\n};\nuserApiPage.updateUser(2, updatedUser).then(response => {\n  const validate = ajv.compile(_updateUserSchema.default);\n  const valid = validate(response.body);\n  expect(valid, `Schema validation failed: ${ajv.errorsText(validate.errors)}`).to.be.true;\n});",
              "err": {},
              "uuid": "ca4ce060-5a5c-4fb5-9b0f-1afe4db4702a",
              "parentUUID": "65d78fb9-965a-42bf-aff3-546b99e5f01a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "521000a0-180d-4fe2-b193-281134a2bb90",
            "ca4ce060-5a5c-4fb5-9b0f-1afe4db4702a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 539,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1ed0a55b-bb32-4f8f-bf7a-d6a49f3dd152",
      "title": "",
      "fullFile": "cypress/e2e/api-tests/userLifecycle.spec.js",
      "file": "cypress/e2e/api-tests/userLifecycle.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "afe6caf0-0c3e-4dab-9aca-82d5ec502821",
          "title": "User API - Full Lifecycle",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user successfully",
              "fullTitle": "User API - Full Lifecycle should create a new user successfully",
              "timedOut": null,
              "duration": 271,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userApiPage.createUser(initialUserData).then(response => {\n  expect(response.status).to.eq(201);\n  expect(response.body).to.have.property('name', initialUserData.name);\n  expect(response.body).to.have.property('job', initialUserData.job);\n  expect(response.body).to.have.property('id');\n  userId = response.body.id;\n});",
              "err": {},
              "uuid": "ee05161b-296a-4faa-91e5-63c94069420f",
              "parentUUID": "afe6caf0-0c3e-4dab-9aca-82d5ec502821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the created user's information",
              "fullTitle": "User API - Full Lifecycle should verify the created user's information",
              "timedOut": null,
              "duration": 648,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(userId, 'User ID should exist').to.not.be.undefined;\nuserApiPage.getUserById(userId).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.data).to.have.property('id', parseInt(userId));\n  expect(response.body.data).to.have.property('first_name');\n});",
              "err": {
                "message": "AssertionError: expected 404 to equal 200",
                "estack": "AssertionError: expected 404 to equal 200\n    at Context.eval (webpack://requesapiautomation/./cypress/e2e/api-tests/userLifecycle.spec.js:31:33)",
                "diff": "- 404\n+ 200\n"
              },
              "uuid": "d94825e3-b14c-407a-be13-1b62165cf9a0",
              "parentUUID": "afe6caf0-0c3e-4dab-9aca-82d5ec502821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update the user's information",
              "fullTitle": "User API - Full Lifecycle should update the user's information",
              "timedOut": null,
              "duration": 250,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(userId, 'User ID should exist').to.not.be.undefined;\nuserApiPage.updateUser(userId, updatedUserData).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('name', updatedUserData.name);\n  expect(response.body).to.have.property('job', updatedUserData.job);\n});",
              "err": {},
              "uuid": "fd2215f5-d41f-4365-855d-740830674dfa",
              "parentUUID": "afe6caf0-0c3e-4dab-9aca-82d5ec502821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the updated user's information",
              "fullTitle": "User API - Full Lifecycle should verify the updated user's information",
              "timedOut": null,
              "duration": 637,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(userId, 'User ID should exist').to.not.be.undefined;\nuserApiPage.getUserById(userId).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.data).to.have.property('id', parseInt(userId));\n});",
              "err": {
                "message": "AssertionError: expected 404 to equal 200",
                "estack": "AssertionError: expected 404 to equal 200\n    at Context.eval (webpack://requesapiautomation/./cypress/e2e/api-tests/userLifecycle.spec.js:51:33)",
                "diff": "- 404\n+ 200\n"
              },
              "uuid": "43762883-899c-4334-8197-94b323243dd0",
              "parentUUID": "afe6caf0-0c3e-4dab-9aca-82d5ec502821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete the user successfully",
              "fullTitle": "User API - Full Lifecycle should delete the user successfully",
              "timedOut": null,
              "duration": 234,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(userId, 'User ID should exist').to.not.be.undefined;\nuserApiPage.deleteUser(userId).then(response => {\n  expect(response.status).to.eq(204);\n});",
              "err": {},
              "uuid": "ffd2e611-c192-47ed-b762-44a497f94795",
              "parentUUID": "afe6caf0-0c3e-4dab-9aca-82d5ec502821",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ee05161b-296a-4faa-91e5-63c94069420f",
            "fd2215f5-d41f-4365-855d-740830674dfa",
            "ffd2e611-c192-47ed-b762-44a497f94795"
          ],
          "failures": [
            "d94825e3-b14c-407a-be13-1b62165cf9a0",
            "43762883-899c-4334-8197-94b323243dd0"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2040,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}