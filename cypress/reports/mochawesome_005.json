{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2025-01-16T21:52:46.743Z",
    "end": "2025-01-16T21:52:47.384Z",
    "duration": 641,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5c1d23ad-e9e1-40fa-8d1f-e25c520584ec",
      "title": "",
      "fullFile": "cypress/e2e/api-tests/updateUser.spec.js",
      "file": "cypress/e2e/api-tests/updateUser.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "65d78fb9-965a-42bf-aff3-546b99e5f01a",
          "title": "Users API - PUT Requests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update user details successfully",
              "fullTitle": "Users API - PUT Requests should update user details successfully",
              "timedOut": null,
              "duration": 266,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUser = {\n  name: 'Jane Doe',\n  job: 'Manager'\n};\nuserApiPage.updateUser(2, updatedUser).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('name', 'Jane Doe');\n  expect(response.body).to.have.property('job', 'Manager');\n});",
              "err": {},
              "uuid": "521000a0-180d-4fe2-b193-281134a2bb90",
              "parentUUID": "65d78fb9-965a-42bf-aff3-546b99e5f01a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate the schema for updating a user",
              "fullTitle": "Users API - PUT Requests should validate the schema for updating a user",
              "timedOut": null,
              "duration": 273,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUser = {\n  name: 'Jane Doe',\n  job: 'Senior Developer'\n};\nuserApiPage.updateUser(2, updatedUser).then(response => {\n  const validate = ajv.compile(_updateUserSchema.default);\n  const valid = validate(response.body);\n  expect(valid, `Schema validation failed: ${ajv.errorsText(validate.errors)}`).to.be.true;\n});",
              "err": {},
              "uuid": "ca4ce060-5a5c-4fb5-9b0f-1afe4db4702a",
              "parentUUID": "65d78fb9-965a-42bf-aff3-546b99e5f01a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "521000a0-180d-4fe2-b193-281134a2bb90",
            "ca4ce060-5a5c-4fb5-9b0f-1afe4db4702a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 539,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}