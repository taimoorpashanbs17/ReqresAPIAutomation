{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 2,
    "pending": 0,
    "failures": 1,
    "start": "2025-01-16T21:52:30.373Z",
    "end": "2025-01-16T21:52:32.180Z",
    "duration": 1807,
    "testsRegistered": 3,
    "passPercent": 66.66666666666666,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a83144a9-47b1-429e-baf4-b2514033609f",
      "title": "",
      "fullFile": "cypress/e2e/api-tests/createUser.spec.js",
      "file": "cypress/e2e/api-tests/createUser.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6dd6159a-4e9d-4b4a-a537-9b69d012aa6b",
          "title": "Users API - POST Requests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create User Successfully",
              "fullTitle": "Users API - POST Requests Create User Successfully",
              "timedOut": null,
              "duration": 687,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  name: `Testing_user_${formattedDateTime}`,\n  job: 'Developer'\n};\nuserApiPage.createUser(newUser).then(response => {\n  expect(response.status).to.eq(201);\n  expect(response.body).to.have.property('name', `Testing_user_${formattedDateTime}`);\n  expect(response.body).to.have.property('job', 'Developer');\n  expect(response.body).to.have.property('id');\n});",
              "err": {},
              "uuid": "3e92690d-befb-4c80-b90b-0148cf83d165",
              "parentUUID": "6dd6159a-4e9d-4b4a-a537-9b69d012aa6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Return an error when mandatory fields are missing",
              "fullTitle": "Users API - POST Requests Return an error when mandatory fields are missing",
              "timedOut": null,
              "duration": 731,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const incompleteUser = {\n  name: '',\n  job: 'Tester'\n};\nuserApiPage.createUser(incompleteUser).then(response => {\n  expect(response.status).to.eq(400);\n});",
              "err": {
                "message": "AssertionError: expected 201 to equal 400",
                "estack": "AssertionError: expected 201 to equal 400\n    at Context.eval (webpack://requesapiautomation/./cypress/e2e/api-tests/createUser.spec.js:37:39)",
                "diff": "- 201\n+ 400\n"
              },
              "uuid": "eeee1f29-0bbe-4fe1-a8a9-53c53428c610",
              "parentUUID": "6dd6159a-4e9d-4b4a-a537-9b69d012aa6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate the schema for creating a user",
              "fullTitle": "Users API - POST Requests should validate the schema for creating a user",
              "timedOut": null,
              "duration": 280,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  name: `John Doe_${formattedDateTime}`,\n  job: 'Developer'\n};\nuserApiPage.createUser(newUser).then(response => {\n  const validate = ajv.compile(_createUserSchema.default);\n  const valid = validate(response.body);\n  expect(valid, `Schema validation failed: ${ajv.errorsText(validate.errors)}`).to.be.true;\n});",
              "err": {},
              "uuid": "0e7a0b55-9636-4c40-9ae1-55f51a3dd18e",
              "parentUUID": "6dd6159a-4e9d-4b4a-a537-9b69d012aa6b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3e92690d-befb-4c80-b90b-0148cf83d165",
            "0e7a0b55-9636-4c40-9ae1-55f51a3dd18e"
          ],
          "failures": [
            "eeee1f29-0bbe-4fe1-a8a9-53c53428c610"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1698,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}