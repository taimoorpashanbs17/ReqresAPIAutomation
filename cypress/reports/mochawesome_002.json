{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2025-01-16T21:52:38.062Z",
    "end": "2025-01-16T21:52:38.828Z",
    "duration": 766,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4189f42c-454c-4417-8b0e-9e34c1b3effb",
      "title": "",
      "fullFile": "cypress/e2e/api-tests/getUserInfo.spec.js",
      "file": "cypress/e2e/api-tests/getUserInfo.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9a0efd7e-5f8f-49c5-adb9-b0d8d76184fe",
          "title": "User API - Get User Info Flow",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should validate that the response body matches the expected JSON Schema",
              "fullTitle": "User API - Get User Info Flow should validate that the response body matches the expected JSON Schema",
              "timedOut": null,
              "duration": 228,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userApiPage.getUserById(userId).then(response => {\n  const validate = ajv.compile(_userSchema.default);\n  const valid = validate(response.body);\n  expect(valid, `Response body does not match the expected schema: ${ajv.errorsText(validate.errors)}`).to.be.true;\n});",
              "err": {},
              "uuid": "c32e95b9-4165-4d6f-b5ba-3fe582447188",
              "parentUUID": "9a0efd7e-5f8f-49c5-adb9-b0d8d76184fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate specific data properties in the response",
              "fullTitle": "User API - Get User Info Flow should validate specific data properties in the response",
              "timedOut": null,
              "duration": 190,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userApiPage.getUserById(userId).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.data).to.have.property('id', userId);\n  expect(response.body.data).to.have.property('email').that.is.a('string');\n  expect(response.body.data).to.have.property('first_name').that.is.a('string');\n  expect(response.body.data).to.have.property('last_name').that.is.a('string');\n  expect(response.body.data).to.have.property('avatar').that.is.a('string');\n  expect(response.body.data.email).to.eq('janet.weaver@reqres.in');\n  expect(response.body.data.first_name).to.eq('Janet');\n});",
              "err": {},
              "uuid": "8d219e57-6899-44ea-9b1e-523ec99b0e82",
              "parentUUID": "9a0efd7e-5f8f-49c5-adb9-b0d8d76184fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a 404 for a non-existent user",
              "fullTitle": "User API - Get User Info Flow should return a 404 for a non-existent user",
              "timedOut": null,
              "duration": 253,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userApiPage.getUserById(9999).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "adc653af-91aa-4384-a526-7bddb45c18a2",
              "parentUUID": "9a0efd7e-5f8f-49c5-adb9-b0d8d76184fe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c32e95b9-4165-4d6f-b5ba-3fe582447188",
            "8d219e57-6899-44ea-9b1e-523ec99b0e82",
            "adc653af-91aa-4384-a526-7bddb45c18a2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 671,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}